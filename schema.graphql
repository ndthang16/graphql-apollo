type Query {
  user(id: String!): User!
  users: [User]
  folder(id: String!): Folder!
  folders(input: Folders): [Folder]
}

type Mutation {
  createUser(input: CreateUser!): User!
  updateUser(input: UpdateUser!): User!
  deleteUser(id: String!): DeletePayload!
  createFolder(input: CreateFolder!): Folder!
  updateFolder(input: UpdateFolder!): Folder!
  deleteFolder(id: String!): DeletePayload!
}

input CreateUser {
  firstName: String
  lastName: String
  email: String!
  userName: String!
  status: Status!
}

input UpdateUser {
  id: String!
  firstName: String
  lastName: String
  status: Status
}

input CreateFolder {
  name: String!
  description: String
  thumbnailUrl: String
  parentId: String
  status: Status!
}

input UpdateFolder {
  id: String!
  name: String
  description: String
  thumbnailUrl: String
  status: Status
}

enum Status {
  active
  inactive
  suppend
  deleted
}

input Folders {
  id: String
  name: String
}

type User {
  id: String
  firstName: String
  lastName: String
  folders: [Folder]
}

type Folder {
  id: String
  name: String
  description: String
  user: User
}

type DeletePayload {
  id: String!
  message: String
}